
.lm files are raw data from the camera - compressed timestamped listmode of coincidence events
i.e. each entry encodes the x,y,z positions of each end of an LOR with a timestamp: (t; xa, ya, za, xb, yb, zb) in ms, and mm. Non-human readable.

CPbl_1.lm - stationary tracer at bottom left of the HR++ ring
CPbr_1.lm - stationary tracer at bottom right of the HR++ ring
FreeMotion_1.lm - tracer moving freely in some dynamic system. (2023) I *think* this is one of the food bleder vertex data
PHYLAB3 ... old Y3 data sets of unknown conditions and/or origin


You need to use the PEPT algorithm (ctrack) to convert a .lm file into a .a file. More details below. 


.a files are processed .lm files to extract the tracer particle trajectory. Human readable. 10 lines header of (semi-) useful (-less) information. Then the trajectory in ascii, columns (space separated) are:
t (ms), x (mm), y (mm), z (mm), u(P) (mm), 0.0, 0.00, fN-used

These data details the tracer particle trajectory. First 4 columns as (t; x, y, z). I can't remember which of x,y,z is vertical, so you will have to figure this out yourselves by calibration. 

Col 5, u(P), is notionally the uncertainty in the measured position vector P, for the location. Units are mm, so this is in effect the "average" uncertainty of the 3 dimensions. You can think of this best as the radius of a "sphere of uncertainty" surrounding the given location. 

Next two columns are always 0.0 and 0.00 here.

fN-used is the total number of LOR events used in the calculation of the given location. Should be equal to the product of the algorithm parameters f and N where N is the set size and f is the fraction of the set retained in the final calculation. f is given as f(opt) in the header, and N as N events/slice in the header. 



OldData.xlsx is a basic look-see into a .a file. Looks like rolling drum data.
It makes sense to plot the trajectory x,y,z as a function of time.
And to plot the positions as functions of each other - i.e. projections along each coordinate system axis. 
These are "sanity checks". More advanced analysis follows from the .a



ctrack.zip - archive of ctrack executable to get it past firewalls various. 
Note windows only. Should be x86 / x64 compatible. Ask for other things if needed. 

ctrack.exe - contents of above. The PEPT algorithm (Parker 1993) as adapted and applied to out HR++ camera (Buffler 2009, Leadbeater ...). 


Running ctrack (from a terminal):
List file name - the .lm data file you want to process, without the _1 append or .lm file extension

Events/slice - this is N in the literature. The number of LOR events to use per location, default 250

fopt - optimum value of f to use, where f is the fraction of N retained by the calculation. For the HR++ the optimal value is measured to be about 50% (often more), for the Birmingham systems 10 - 25%, for van der Merwe (2023) system 85%. This value needs calibrating for every system studied, and is approx constant for that system. Default is a "reasonable guess".

Max error - maximum value of u(P) that is written to the output file. Locations above this value are still calculated, but not written out. 

Output filename - usually the filename above as a .a. 

After this input the algorithm proceeds to process the .lm file and calculate the .a file. You get a running summary of progress (every 0.1 seconds updated) then a file level summary before any key closes the program (where any key means enter). 

Running summary:
Averages correspond to the averaged x,y,z locations (mm)
the follwoing lines their standard deviations (mm)
delta, D are the sqrt(std(x)**2 + std(y)**2 + std(z)**2) and average u(P) respectively
number of locations is obvious, should be equal to the number of LOR events in the file divided by N (for a well behaved system).


 



